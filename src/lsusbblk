#!/usr/bin/python3 -s
"""
    lsusbblk Utility for listing attached USB block devices

    Copyright (C) 2024 Lowkey <public3838@bahnhof.se>

    lsusbblk is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, version 3 of the License.

    lsusbblk is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program.  If not, see <http://www.gnu.org/licenses/>.

 -*- Mode: Python; coding: utf-8; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-

-----------------------------------------------------------------------------
"""

import os
import re
import sys
import pwd
import time
import urllib.request
from lib.conf import conf  # Retrieve configuration inkl command line options
from lib.usbblk import usbblk as USBBLK  # USB block device class
from lib.usbblk import usbids as USBIDS  # USB id file class
from lib.confutil import Version as Ver  # Version string handling
import lib.output as output

__author__ = "Lowkey"
__copyright__ = "Copyright 2024"
__credits__ = ["All gigants gone before me"]
__license__ = "GPLv3"
__version__ = "1.0.9"
__email__ = "public3838@bahnhof.se"


def main():

    # Default properties shown in compact listing and long listing
    sprop = ["device", "vendor", "model", "size", "label"]
    lprop = ["device", "usbver", "vendor", "model", "id", "size", "serial", "label"]

    def print_detailed(dev_list, get_all_prop, only_device=None):
        """present detailed properties"""
        prop_max_size = 0
        for pr in get_all_prop:
            prop_max_size = max(prop_max_size, len(pr))

        for d in dev_list:
            i = 0
            for pr in d.get_labels():
                op.print_line(pr, prop_max_size, d.get(pr), i)
                i = 8

    def print_tabel(dev_list, prop_sizes):
        """present result in table format"""
        header = ""
        devider = ""
        normal(" ")
        for pr in prop:
            header = header + op.col(pr.upper(), prop_sizes(pr), "|")
            devider = devider + op.col("-" * prop_sizes(pr), prop_sizes(pr), "+")
        normal(header)
        normal(devider)
        for d in dev_list:
            result = ""
            for pr in prop:
                result = result + op.col(d.get(pr), prop_sizes(pr), "|")
            normal(result)
        normal(" ")

    def print_quiet(dev_list, only_device=None):
        for d in dev_list:
            result = ""
            for pr in prop:
                result += d.get(pr) + " "
            normal(result)

    def display_devices(devices, only_device=None):
        dev_list = []
        if only_device is None:
            dev_list = devices.get_devices()
        else:
            dev_list.append(devices.get(only_device))

        if cf.quiet:
            if cf.json:
                print(devices.serialise(prop, only_device))
            else:
                print_quiet(dev_list, only_device)
        else:
            if cf.verbose:
                print_detailed(dev_list, list(devices.get_all_prop()), only_device)
            else:
                print_tabel(dev_list, devices.get_label_size_of_key)

    """ ################# main ################## """

    prgname = os.path.basename(__file__)
    version = Ver(__version__)

    try:
        # Retrieve command line swithes and options
        cf = conf(prgname, str(version), __author__, __copyright__)
        # cf = conf(name=prgname, ver=version, author=__author__, copyright=__copyright__)

        op = output.formated_print(cf.monochrome, cf.quiet)
        normal = op.normal
        warning = op.warning
        error = op.error

        # Check existans of USB id list file
        usbids = USBIDS()
        if not usbids.file_is_loaded():
            warning(
                "No USB id file /usr/share/hwdata/usb.ids not found. "
                + "Try to download file using --usblist argument."
            )

        # Download list of USB id and quit
        if cf.usblist:
            error("This is wrong...")
            raise NotImplementedError(
                "Fixme: Make sure that download is done with least priv..."
            )
            warning("Trying to download new USB id list")
            try:
                urllib.request.urlretrieve(
                    "http://www.linux-usb.org/usb.ids", "usb.ids"
                )
                normal("New list downloaded")
            except urllib.request.ContentTooShortError:
                error("Error: Transfer interrupted")
            except urllib.error.URLError:
                error("Error: Host not found")
            sys.exit(0)

        # Enumerate connected connected USB block devices
        current_devices = USBBLK(not cf.scientific)

        # If long output is requested
        if cf.long:
            prop = lprop
        else:
            prop = sprop

        # If quiet requested make output monochrome
        if cf.quiet:
            cf.monochrome = True

        # If json requested make output quiet and monochrome
        if cf.json:
            cf.monochrome = True
            cf.quiet = True

        # Print program, version and exit
        if cf.version:
            normal(prgname + " " + str(version))
            sys.exit(0)

        # Print available properties and exit
        if cf.list:
            normal("These are the properties that can be used to " + "define output:")
            proplist = list(current_devices.get_all_prop())
            normal(str(proplist))
            sys.exit(0)

        # If given devices not present then exit
        if cf.device:
            if cf.device not in current_devices.get_device_list():
                error(f"USB block devices not found: {cf.device}")
                sys.exit(1)

        # If enumerate devices present and exit
        if cf.nodevices:
            normal(
                "Number USB block devices found: " + str(current_devices.number_of())
            )
            sys.exit(0)

        # If change of properties to be presented
        if cf.properties:
            # remove ',' and surplus white spaces
            cf.properties = cf.properties.replace(",", " ")
            cf.properties = re.sub(r"\s+", " ", cf.properties)
            prop = list(cf.properties.split(" "))

        # If scientific do not show numerical values in human readable form
        if cf.scientific:
            pass

        """ ################ initial checks ################### """
        # Check prop definition
        for pr in prop:
            if pr not in current_devices.get_all_prop():
                error(f"Unknown property: '{pr}'', use -L to list valid properties")
                sys.exit(1)

        """ ################ execute command ################## """
        # If zero devices present fact
        if current_devices.is_empty():
            error("No USB block devices found")

        # If Debug
        if cf.debug:
            current_devices.debug()

        # Table presentation or detailed presentation
        if not (cf.follow and cf.quiet) and not current_devices.is_empty():
            if cf.device:
                display_devices(current_devices, cf.device)
            else:
                display_devices(current_devices)

        # If follow is select
        if cf.follow:
            current_list = current_devices.get_device_list()
            normal("Waiting for new device...")
            while True:
                current_devices = USBBLK(not cf.scientific)
                new_list = current_devices.get_device_list()
                delete_list = list(set(current_list) - set(new_list))
                added_list = list(set(new_list) - set(current_list))
                if int(len(new_list) - len(current_list)) < 0:
                    error("Device removed: " + str(delete_list[0]))
                    current_list = new_list
                if added_list:
                    normal("Device added: " + str(added_list))
                    break
                time.sleep(0.5)
            op.display_devices(current_devices, str(added_list[0]))

        # Notify user if user not root or part of disk group
        # uid, gid = os.geteuid(), os.getegid()
        uid = os.geteuid()
        impersonated_username = pwd.getpwuid(uid)[0]
        grouplist = os.getgrouplist(impersonated_username, os.getegid())
        if not ((0 in grouplist) or (6 in grouplist)):
            warning(
                "Note: The effective user is not root or part "
                + "of disk group. Size can not be presented."
            )
            warning(
                "      USB version, speed, bus and address may " + " not be presented"
            )
            warning("")

        sys.exit(0)

    except KeyboardInterrupt:
        sys.exit(0)
    else:
        sys.exit(0)


if __name__ == "__main__":
    main()


"""

https://www.usb.org/defined-class-codes

00h	Device	Use class information in the Interface Descriptors
01h	Interface	Audio
02h	Both	Communications and Communications Device Class (CDC) Control
03h	Interface	Human Interface Device (HID)
05h	Interface	Physical
06h	Interface	Image
07h	Interface	Printer
08h	Interface	Mass Storage (MSD)
09h	Device	8Hub
0Ah	Interface	CDC-Data
0Bh	Interface	Smart Card
0Dh	Interface	Content Security
0Eh	Interface	Video
0Fh	Interface	Personal Healthcare
10h	Interface	Audio/Video Devices
11h	Device	Billboard Device Class
DCh	Both	Diagnostic Device
0Eh	Interface	Wireless Controller
EFh	Both	Miscellaneous
FEh	Interface	Application Specific
FFh	Both	Vendor Specific


"""
